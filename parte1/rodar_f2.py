"""
Script para executar APENAS a otimiza√ß√£o de F2 (minimizar n√∫mero de equipes)
Execute: python rodar_f2.py
"""

import sys
import os
import numpy as np

# Adiciona src ao path
sys.path.insert(0, 'src')

from src.monitoramento_ativos_base import MonitoramentoAtivosCompleto

def main_f2_only():
    """Fun√ß√£o principal para otimizar apenas F2."""
    print("="*80, flush=True)
    print("EXECUTANDO OTIMIZACAO DE F2 (Minimizar N√∫mero de Equipes)", flush=True)
    print("="*80, flush=True)
    print("", flush=True)
    
    # Inicializa o problema
    print("Carregando dados...", flush=True)
    monitoramento = MonitoramentoAtivosCompleto('data/probdata.csv')
    
    if monitoramento.dados.empty:
        print("Erro: N√£o foi poss√≠vel carregar os dados.")
        return
    
    print(f"Dados carregados: {monitoramento.n_ativos} ativos")
    print(f"Bases dispon√≠veis: {monitoramento.m_bases}")
    print(f"Equipes m√°ximas: {monitoramento.s_equipes}")
    print(f"Eta (min ativos/equipe): {monitoramento.eta}")
    print("")
    
    # Calcula m√≠nimo te√≥rico de ativos por equipe
    min_ativos_por_equipe = monitoramento.eta * monitoramento.n_ativos / monitoramento.s_equipes
    print(f"M√≠nimo de ativos por equipe (eta*n/s): {min_ativos_por_equipe:.2f}")
    print(f"Com 1 equipe: {monitoramento.n_ativos} ativos (OK!)" if monitoramento.n_ativos >= min_ativos_por_equipe else "Com 1 equipe: INVI√ÅVEL")
    print("")
    
    # Cria diret√≥rios se n√£o existirem
    os.makedirs('resultados/graficos', exist_ok=True)
    os.makedirs('resultados/relatorios', exist_ok=True)
    
    # Configura n√∫mero de execu√ß√µes
    n_execucoes = 5
    print(f"Configura√ß√£o: {n_execucoes} execu√ß√µes √ó 500 itera√ß√µes (max)")
    print(f"Crit√©rio de parada: 5 itera√ß√µes sem melhoria")
    print("")
    
    # Executa apenas F2
    print("="*80)
    print("INICIANDO OTIMIZA√á√ÉO DE F2")
    print("="*80)
    print("")
    
    execucoes_f2 = []
    for execucao in range(n_execucoes):
        print(f"\n{'='*60}")
        print(f"EXECU√á√ÉO {execucao + 1}/{n_execucoes} de F2")
        print(f"{'='*60}")
        
        resultado = monitoramento.algoritmo_vns.vns(
            funcao_objetivo='f2',
            max_iter=500,
            max_iter_sem_melhoria=5
        )
        
        execucoes_f2.append(resultado)
        
        # Mostra resultado
        equipes_usadas = int(resultado['valor_objetivo'])
        print(f"\n  ‚úì Resultado: {equipes_usadas} equipes")
        print(f"  ‚úì Itera√ß√µes: {len(resultado['historico'])}")
        
        # Verifica viabilidade
        x_ij = resultado['x_ij']
        y_jk = resultado['y_jk']
        h_ik = resultado['h_ik']
        
        viavel = monitoramento.funcoes_objetivo.verificar_restricoes(x_ij, y_jk, h_ik)
        print(f"  ‚úì Solu√ß√£o vi√°vel: {'SIM' if viavel else 'N√ÉO'}")
        
        # Mostra distribui√ß√£o
        ativos_por_equipe = np.sum(h_ik, axis=0)
        equipes_ativas = np.where(ativos_por_equipe > 0)[0]
        bases_usadas = np.sum(np.sum(y_jk, axis=1) > 0)
        
        print(f"  ‚úì Bases usadas: {bases_usadas}")
        print(f"  ‚úì Distribui√ß√£o de ativos por equipe:")
        for k in equipes_ativas:
            n_ativos_eq = int(ativos_por_equipe[k])
            base_eq = np.where(y_jk[:, k] == 1)[0][0] + 1
            print(f"      - Equipe {k}: {n_ativos_eq} ativos (base {base_eq})")
    
    # Estat√≠sticas finais
    print("\n" + "="*80)
    print("ESTAT√çSTICAS FINAIS F2")
    print("="*80)
    
    valores_f2 = [int(r['valor_objetivo']) for r in execucoes_f2]
    
    print(f"\nN√∫mero de equipes:")
    print(f"  M√≠nimo:  {np.min(valores_f2)}")
    print(f"  M√°ximo:  {np.max(valores_f2)}")
    print(f"  M√©dia:   {np.mean(valores_f2):.2f}")
    print(f"  Desvio:  {np.std(valores_f2):.2f}")
    
    # Pega melhor solu√ß√£o
    melhor_exec = min(execucoes_f2, key=lambda x: x['valor_objetivo'])
    melhor_valor = int(melhor_exec['valor_objetivo'])
    
    print(f"\n‚úì MELHOR SOLU√á√ÉO: {melhor_valor} equipe(s)")
    
    # Verifica se chegou no m√≠nimo te√≥rico (1 equipe)
    if melhor_valor == 1:
        print("  üéØ √ìTIMO! Chegou no m√≠nimo te√≥rico (1 equipe)!")
    else:
        print(f"  ‚ö† Ainda pode melhorar (m√≠nimo te√≥rico: 1 equipe)")
    
    # Gera gr√°ficos
    print("\n" + "="*80)
    print("GERANDO VISUALIZA√á√ïES")
    print("="*80)
    
    # Monta estrutura de resultados para visualiza√ß√£o
    resultados_f2 = {
        'f2': {
            'execucoes': execucoes_f2,
            'min': np.min(valores_f2),
            'max': np.max(valores_f2),
            'std': np.std(valores_f2),
            'media': np.mean(valores_f2)
        }
    }
    
    # Plota melhor solu√ß√£o
    print("\nPlotando melhor solu√ß√£o...", flush=True)
    monitoramento.plotar_melhor_solucao(melhor_exec)
    monitoramento.plotar_mapa_geografico(melhor_exec)
    
    # Gera relat√≥rio simples
    print("\nGerando relat√≥rio...", flush=True)
    relatorio = gerar_relatorio_f2(monitoramento, resultados_f2, melhor_exec)
    
    with open('resultados/relatorios/relatorio_f2_only.txt', 'w', encoding='utf-8') as f:
        f.write(relatorio)
    
    print("\n" + "="*80)
    print("OTIMIZA√á√ÉO F2 CONCLU√çDA!")
    print("="*80)
    print("\nArquivos gerados:")
    print("  - resultados/graficos/melhor_solucao_f2.png")
    print("  - resultados/graficos/mapa_geografico_f2.png")
    print("  - resultados/relatorios/relatorio_f2_only.txt")
    print("")

def gerar_relatorio_f2(monitoramento, resultados, melhor_exec):
    """Gera relat√≥rio espec√≠fico para F2."""
    relatorio = []
    relatorio.append("="*80)
    relatorio.append("RELAT√ìRIO DE OTIMIZA√á√ÉO F2 - MINIMIZAR N√öMERO DE EQUIPES")
    relatorio.append("="*80)
    relatorio.append("")
    
    # Informa√ß√µes do problema
    relatorio.append("INFORMA√á√ïES DO PROBLEMA:")
    relatorio.append(f"  - Ativos:  {monitoramento.n_ativos}")
    relatorio.append(f"  - Bases:   {monitoramento.m_bases}")
    relatorio.append(f"  - Equipes: {monitoramento.s_equipes}")
    relatorio.append(f"  - Eta:     {monitoramento.eta}")
    min_ativos = monitoramento.eta * monitoramento.n_ativos / monitoramento.s_equipes
    relatorio.append(f"  - M√≠nimo de ativos por equipe: {min_ativos:.2f}")
    relatorio.append("")
    
    # Estat√≠sticas
    relatorio.append("ESTAT√çSTICAS:")
    valores = [int(r['valor_objetivo']) for r in resultados['f2']['execucoes']]
    relatorio.append(f"  - N√∫mero de execu√ß√µes: {len(valores)}")
    relatorio.append(f"  - Equipes (m√≠nimo):    {np.min(valores)}")
    relatorio.append(f"  - Equipes (m√°ximo):    {np.max(valores)}")
    relatorio.append(f"  - Equipes (m√©dia):     {np.mean(valores):.2f}")
    relatorio.append(f"  - Desvio padr√£o:       {np.std(valores):.2f}")
    relatorio.append("")
    
    # Melhor solu√ß√£o
    relatorio.append("MELHOR SOLU√á√ÉO ENCONTRADA:")
    melhor_valor = int(melhor_exec['valor_objetivo'])
    relatorio.append(f"  - N√∫mero de equipes: {melhor_valor}")
    relatorio.append(f"  - Itera√ß√µes at√© converg√™ncia: {len(melhor_exec['historico'])}")
    
    x_ij = melhor_exec['x_ij']
    y_jk = melhor_exec['y_jk']
    h_ik = melhor_exec['h_ik']
    
    # Calcula f1 da melhor solu√ß√£o f2
    f1_valor = monitoramento.funcoes_objetivo.calcular_f1(x_ij, h_ik, y_jk)
    relatorio.append(f"  - F1 (dist√¢ncia total): {f1_valor:.2f}")
    
    viavel = monitoramento.funcoes_objetivo.verificar_restricoes(x_ij, y_jk, h_ik)
    relatorio.append(f"  - Vi√°vel: {'SIM' if viavel else 'N√ÉO'}")
    relatorio.append("")
    
    # Distribui√ß√£o
    relatorio.append("DISTRIBUI√á√ÉO DA MELHOR SOLU√á√ÉO:")
    ativos_por_equipe = np.sum(h_ik, axis=0)
    equipes_ativas = np.where(ativos_por_equipe > 0)[0]
    bases_usadas = np.sum(np.sum(y_jk, axis=1) > 0)
    
    relatorio.append(f"  - Bases utilizadas: {bases_usadas}")
    relatorio.append(f"  - Equipes utilizadas: {len(equipes_ativas)}")
    relatorio.append("")
    relatorio.append("  Distribui√ß√£o por equipe:")
    
    for k in equipes_ativas:
        n_ativos_eq = int(ativos_por_equipe[k])
        base_eq = np.where(y_jk[:, k] == 1)[0][0] + 1
        relatorio.append(f"    Equipe {k}: {n_ativos_eq} ativos (base {base_eq})")
    
    relatorio.append("")
    relatorio.append("="*80)
    
    return "\n".join(relatorio)

if __name__ == "__main__":
    main_f2_only()

